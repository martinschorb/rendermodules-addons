dockertest:
  image: "mongo:4-focal"
  tags:
    - docker7
  stage: test
  variables:
    RENDER_HOST: localhost
    RENDER_PORT: 8080
    RENDER_CLIENT_SCRIPTS: render/render-ws-java-client/src/main/scripts

  before_script:
  - apt-get update && apt-get install -y git
#    pip\
#    libblas-dev\
#    liblapack-dev\
#    libatlas-base-dev\
#    libopenblas-base\
#    libopenblas-dev\
#    gfortran\
#    curl\
#    cmake\
#    maven
  - git clone --depth 1 -b master  https://github.com/AllenInstitute/asap-modules
  - sed -i '/opencv/d' asap-modules/requirements.txt
  - sed -i '/stitch/d' asap-modules/requirements.txt
  - pip install -e asap-modules/
  - pip install git+https://git.embl.de/schorb/pyem
  - pip install git+https://github.com/constantinpape/pybdv
  - pip install -r requirements.txt
  - pip install -r test_requirements.txt
  - git clone --depth 1 https://github.com/saalfeldlab/render.git render -b master
  - ./render/render-ws/src/main/scripts/install.sh
  - export JAVA_HOME=`readlink -m ./render/deploy/*jdk*`
  - mvn package -pl render-ws-java-client,render-app,render-ws  -am -DskipTests -f render/pom.xml
  - cp render/render-ws/target/render-ws-*.war render/deploy/jetty_base/webapps/render-ws.war
  - render/deploy/jetty_base/jetty_wrapper.sh start
  - export RENDER_CLIENT_JAR=`readlink -m render/render-ws-java-client/target/render-ws-java-client-*-standalone.jar`
  - export RENDER_WS_JAVA_CLIENT_EXAMPLE_DATA=`readlink -m render/render-ws-java-client/src/main/resources`
  - export RENDER_APP_EXAMPLE_DATA=`readlink -m render/render-app/src/test/resources`
  - export RENDER_JAVA_HOME=$JAVA_HOME
  - "curl -X GET --header 'Accept: application/json' 'http://localhost:8080/render-ws/v1/serverProperties" 
  - mkdir -p /tmp/example_1 && cp -R $RENDER_WS_JAVA_CLIENT_EXAMPLE_DATA/example_1 /tmp/.
  - cp -R $RENDER_APP_EXAMPLE_DATA/* /tmp/.
  - export RENDER_EXAMPLE_DATA=/tmp
  script:
  - useradd testuser
  - chmod 777 -R *
  - su testuser -c "coverage run -m pytest"
  - echo $RENDER_PORT
  - coverage xml
  - coverage-badge
  - coverage report
  artifacts:
    reports:
      cobertura:
        coverage.xml
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
    
pages:
  image: python:3.7-buster
  stage: deploy
  before_script:
  - apt install git
  - pip install -U sphinx
  - pip install git+https://github.com/AllenInstitute/asap-modules
  - pip install git+https://git.embl.de/schorb/pyem
  - pip install git+https://github.com/constantinpape/pybdv
  - pip install -r requirements.txt
  script:
  - sphinx-build -b html docs public
  artifacts:
    paths:
    - public
  only:
  - main
  - doctest