dockertest:
  image: mreimbold/debian10-dind:20.10.6
  stage: test
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    RENDER_HOST: localhost
    RENDER_PORT: 8080
    RENDER_CLIENT_SCRIPTS: render/render-ws-java-client/src/main/scripts
  services:
    - mreimbold/debian10-dind:20.10.6
  before_script:
  - apt update && apt install -y git\
    libblas-dev\
    liblapack-dev\
    libatlas-base-dev\
    libopenblas-base\
    libopenblas-dev\
    gfortran\
    wget\
    gnupg\
    software-properties-common\
    maven
  - wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | apt-key add -
  - add-apt-repository --yes https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/
  - apt update -y && apt install adoptopenjdk-8-hotspot -y
  - pip install git+https://github.com/AllenInstitute/asap-modules
  - pip install git+https://git.embl.de/schorb/pyem
  - pip install git+https://github.com/constantinpape/pybdv
  - pip install -r requirements.txt
  - pip install -r test_requirements.txt
  - git clone --depth 1 https://github.com/saalfeldlab/render.git render -b master
  - export JAVA_HOME="/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre"
  - mvn -version
  - mvn package -pl render-ws-java-client -am -DskipTests -f render/pom.xml
  - export RENDER_CLIENT_JAR=`readlink -m render/render-ws-java-client/target/render-ws-java-client-*-standalone.jar`
  - export RENDER_WS_JAVA_CLIENT_EXAMPLE_DATA=`readlink -m render/render-ws-java-client/src/main/resources`
  - export RENDER_APP_EXAMPLE_DATA=`readlink -m render/render-app/src/test/resources`
  - export RENDER_JAVA_HOME=$JAVA_HOME
  - mkdir -p /tmp/example_1 && cp -R $RENDER_WS_JAVA_CLIENT_EXAMPLE_DATA/example_1 /tmp/.
  - cp -R $RENDER_APP_EXAMPLE_DATA/* /tmp/.
  - export RENDER_EXAMPLE_DATA=/tmp
  - echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
  - docker-compose up -d
  script:
  - useradd testuser
  - chmod 777 -R *
  - su testuser -c "coverage run -m pytest"
  - echo $RENDER_PORT
  - coverage xml
  - coverage-badge
  - coverage report
  artifacts:
    reports:
      cobertura:
        coverage.xml
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
    
pages:
  image: python:3.7-buster
  stage: deploy
  before_script:
  - apt install git
  - pip install -U sphinx
  - pip install git+https://github.com/AllenInstitute/asap-modules
  - pip install git+https://git.embl.de/schorb/pyem
  - pip install git+https://github.com/constantinpape/pybdv
  - pip install -r requirements.txt
  script:
  - sphinx-build -b html docs public
  artifacts:
    paths:
    - public
  only:
  - main
  - doctest